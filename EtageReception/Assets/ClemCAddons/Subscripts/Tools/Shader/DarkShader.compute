// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Clear
#pragma kernel Fill
#pragma kernel Area
#pragma kernel Radius
#pragma kernel Gradient
#pragma kernel LayeredGradient
#pragma kernel ApplyIntermediary

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> Intermediary;
float4 CurrentColor;
uint2 pos;
uint2 size;
uint2 mid;
bool drawOver;
bool lightBlend;
int radius;
bool reverse;
float2 alphaVariation;
float2 alphaVariations[8];
int radiuses[8];

[numthreads(8,8,1)]
void Clear (uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = float4(0, 0, 0, 0);
}

[numthreads(8,8,1)]
void Fill (uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = CurrentColor;
}

[numthreads(8,8,1)]
void Area (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= pos.x && id.x <= pos.x+size.x)
    {
        if(id.y >= pos.y && id.y <= pos.y+size.y)
        {
            if(drawOver)
            {
                Result[id.xy] = CurrentColor;
            } else
            {
                if(Result[id.xy].w > 0)
                {
                    Result[id.xy] = (Result[id.xy] + CurrentColor) / 2;
                } else
                {
                    Result[id.xy] = CurrentColor;
                }
            }
        }
    }
}

[numthreads(8,8,1)]
void Radius (uint3 id : SV_DispatchThreadID)
{
    if (distance(id,float3(mid,id.z)) <= radius)
    {
        if(drawOver)
        {
            Result[id.xy] = CurrentColor;
        } else
        {
            if(Result[id.xy].w > 0)
            {
                Result[id.xy] = (Result[id.xy] + CurrentColor) / 2;
            } else
            {
                Result[id.xy] = CurrentColor;
            }
        }
    }
}

[numthreads(8,8,1)]
void Gradient (uint3 id : SV_DispatchThreadID)
{
    if (distance(id,float3(mid,id.z)) <= radius)
    {
        float4 res = CurrentColor;
        res.w = alphaVariation.x + ((reverse ? (distance(id,float3(mid,id.z)) / radius * CurrentColor.w) : (1 - (distance(id,float3(mid,id.z)) / radius)) * CurrentColor.w) * (alphaVariation.y - alphaVariation.x));
        if(drawOver)
        {
            Result[id.xy] = res;
        } else
        {
            if(Result[id.xy].w > 0)
            {
                Result[id.xy] = (Result[id.xy] + res) / 2;
            } else
            {
                Result[id.xy] = res;
            }
        }
    }
}

[numthreads(8,8,1)]
void LayeredGradient (uint3 id : SV_DispatchThreadID)
{
    float distanceV = distance(id,float3(mid,id.z));
    float4 res = Result[id.xy];
    for (int t = 0; t < 8; t++)
    {
        if (distanceV <= radiuses[t])
        {
            res = CurrentColor;
            if (t == 8-1)
            {
                res.w = alphaVariations[t].y + ((reverse ? (distanceV / radiuses[t] * CurrentColor.w) : (1 - (distanceV / radiuses[t])) * CurrentColor.w) * (alphaVariations[t].x - alphaVariations[t].y));
            }
            else
            {
                res.w = alphaVariations[t].y + ((reverse ? ((distanceV - radiuses[t + 1]) / (radiuses[t] - radiuses[t + 1]) * CurrentColor.w) : (1 - ((distanceV - radiuses[t + 1]) / (radiuses[t] - radiuses[t + 1]))) * CurrentColor.w) * (alphaVariations[t].x - alphaVariations[t].y));
            }
        }
    }
    if(drawOver)
    {
        Result[id.xy] = res;
    } else
    {
        if(Result[id.xy].w > 0)
        {
            if(lightBlend)
            {
                if(Result[id.xy].x != 0 || Result[id.xy].y != 0 || Result[id.xy].z != 0)
                {
                    Result[id.xy].x = (Result[id.xy].x + res.x) / 2;
                    Result[id.xy].y = (Result[id.xy].y + res.y) / 2;
                    Result[id.xy].z = (Result[id.xy].z + res.z) / 2;
                    Result[id.xy].w = min(Result[id.xy].w, res.w);
                } else
                {
                    Result[id.xy].x = res.x;
                    Result[id.xy].y = res.y;
                    Result[id.xy].z = res.z;
                    Result[id.xy].w = min(Result[id.xy].w, res.w);
                }
            } else
            {
                Result[id.xy] = (Result[id.xy] + res) / 2;
            }
        } else
        {
            Result[id.xy] = res;
        }
    }
}

[numthreads(8,8,1)]
void ApplyIntermediary (uint3 id : SV_DispatchThreadID)
{
    if(Intermediary[id.xy].w > 0)
    {
        Result[id.xy] = Intermediary[id.xy];
    }
}